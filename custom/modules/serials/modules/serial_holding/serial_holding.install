<?php

use Drupal\serial_holding\Entity\SerialHolding;

/**
 * @file
 * Contains install and update functions for serial_holding.
 */

/**
 * Rename any physical holding types to print.
 */
function serial_holding_update_8101() {
  $physical_holding_terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(
      [
        'vid' => 'serial_holding_types',
        'name' => 'Physical',
      ]
    );

  foreach ($physical_holding_terms as $term) {
    $term->setName('Print');
    $term->save();
  }
}

/**
 * Rename any Digital holding types to Online.
 */
function serial_holding_update_8102() {
  $physical_holding_terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(
      [
        'vid' => 'serial_holding_types',
        'name' => 'Digital',
      ]
    );

  foreach ($physical_holding_terms as $term) {
    $term->setName('Online');
    $term->save();
  }
}

/**
 * Ensure we now have a new 'Digital' type.
 */
function serial_holding_update_8103() {
  $digital_holding_terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(
      [
        'vid' => 'serial_holding_types',
        'name' => 'Digital',
      ]
    );

  if (empty($digital_holding_terms)) {
    $term = \Drupal\taxonomy\Entity\Term::create([
      'name' => 'Digital',
      'vid' => 'serial_holding_types',
    ])->save();
  }

}

/**
 * Rename Microfilm holding type to Microform.
 */
function serial_holding_update_8104() {
  $microfilm_holding_terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(
      [
        'vid' => 'serial_holding_types',
        'name' => 'Microfilm',
      ]
    );

  foreach ($microfilm_holding_terms as $term) {
    $term->setName('Microform');
    $term->save();
  }
}

/**
 * Add Serial Holding Institution field.
 */
function serial_holding_update_8105() {
  $database = \Drupal::database();
  $transaction = $database->startTransaction('add_holding_institution_field');

  $entity_id = 'serial_holding';
  $field_name = 'holding_institution';
  try {
    addEntityField($entity_id, $field_name);
  }
  catch (\Exception $e) {
    $transaction->rollBack();
    $error = "An error occurred while trying to install the $field_name field. The field was not added: " .
      $e->getMessage() . "\n\n" .
      $e->getTraceAsString();
    \Drupal::logger('db')->error($error);
    throw new UpdateException($error);
  }
}

/**
 * Add Serial Holding Microform Type field.
 */
function serial_holding_update_8106() {
  $database = \Drupal::database();
  $transaction = $database->startTransaction('add_holding_microform_type_field');

  $entity_id = 'serial_holding';
  $field_name = 'holding_microform_type';
  try {
    addEntityField($entity_id, $field_name);
  }
  catch (\Exception $e) {
    $transaction->rollBack();
    $error = "An error occurred while trying to install the $field_name field. The field was not added: " .
      $e->getMessage() . "\n\n" .
      $e->getTraceAsString();
    \Drupal::logger('db')->error($error);
    throw new UpdateException($error);
  }
}

/**
 * Implements hook_update_N().
 *
 * Process all serial holdings with Holding type=Microform,
 * Set Microform Type=pos if empty.
 */
function serial_holding_update_8107(&$sandbox) {
  // Initialize variables during first pass through.
  if (!isset($sandbox['total'])) {
    // Get the 'Microform' term from Serial Holding Types vocabulary.
    $microform_term_array = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(
      [
        'vid' => 'serial_holding_types',
        'name' => 'Microform',
      ]
    );
    $microform_term = reset($microform_term_array);

    // Get sandbox variables.
    $sandbox['current'] = 0;
    $sandbox['microform_tid'] = $microform_term->id();
    $sandbox['total'] = \Drupal::entityQuery('serial_holding')
      ->condition('holding_type', $sandbox['microform_tid'], '=')
      ->count()
      ->execute();
  }
  $batch_size = 25;

  // Process the next batch of entities.
  $tids = \Drupal::entityQuery('serial_holding')
    ->condition('holding_type', $sandbox['microform_tid'], '=')
    ->range($sandbox['current'], $batch_size)
    ->execute();
  foreach ($tids as $tid) {
    $entity = \Drupal::entityTypeManager()
      ->getStorage('serial_holding')
      ->load($tid);
    if (empty($entity->holding_microform_type->getValue())) {
      // Only update Microform type field to 'pos' if FieldItemList value is empty.
      $entity->holding_microform_type->setValue('pos');
      $entity->save();
    }
    unset($entity);
    $sandbox['current']++;
  }

  if ($sandbox['total'] == 0) {
    $sandbox['#finished'] = 1;
  } else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Install a given field for given entity.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function addEntityField($entity_id, $name) {
  $field_storage = \Drupal::entityTypeManager()->getStorage($entity_id);
  $entity_type_id = $field_storage->getEntityTypeId();
  $base_field_definitions = SerialHolding::baseFieldDefinitions($field_storage->getEntityType());
  $storage_definition = $base_field_definitions[$name];
  $definition_manager = \Drupal::entityDefinitionUpdateManager();

  $definition_manager->installFieldStorageDefinition(
    $name,
    $entity_type_id,
    $entity_id,
    $storage_definition
  );
}
