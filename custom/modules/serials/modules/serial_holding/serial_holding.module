<?php

/**
 * @file
 * Contains serial_holding.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

define('SERIAL_HOLDING_ENTITY_REF_FIELD', 'field_serial_holdings');
define('SERIAL_HOLDING_ENTITY_REF_TYPE', 'publication');

/**
 * Implements hook_help().
 */
function serial_holding_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the serial_holding module.
    case 'help.page.serial_holding':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a serial holding entity for serial titles') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_FORM_alter().
 */
function serial_holding_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'serial_holding_add_form':
    case 'serial_holding_edit_form':
      $form['#attached']['library'][] = 'serial_holding/serial-holding-form';
      $form['actions']['submit_cancel'] = [
        '#type' => 'submit',
        '#weight' => 5,
        '#value' => t('Cancel'),
        '#submit' => ['_serial_holding_cancel_redirect_callback'],
        '#limit_validation_errors' => [],
        '#attributes' => [
          'class' => ['btn-warning'],
        ],
      ];
      break;
  }
}

/**
 * Implements hook_theme().
 */
function serial_holding_theme() {
  return [
    'serial_holding' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_entity_delete().
 */
function serial_holding_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity->getType() == 'publication') {
    // Delete associated holdings.
    $associated_holdings = \Drupal::entityTypeManager()
      ->getStorage('serial_holding')
      ->loadByProperties(
        [
          'parent_title' => $entity->id(),
        ]
      );

    foreach ($associated_holdings as $holding) {
      $holding->delete();
    }
  }
}

/**
 * Cancel changes and return to the 'Manage holdings' tab.
 *
 * @param array $form
 *   The form element.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return string
 *   The redirect route for the form.
 */
function _serial_holding_cancel_redirect_callback(array &$form, FormStateInterface &$form_state) {
  $current_route = \Drupal::routeMatch()->getRouteName();

  switch ($current_route) {
    case 'serial_holding.add_holding':
      // Manually set redirect url when Add Serial Holding form is cancelled.
      $build_info = $form_state->getBuildInfo();
      $nid = $build_info['args'][0];
      $route_params = [
        'node' => $nid,
      ];
      $form_state->setRedirect('serial_holding.manage_serial_holdings', $route_params);

      return $form_state;
  }

}
