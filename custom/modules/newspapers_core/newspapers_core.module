<?php

/**
 * @file
 * Contains newspapers_core.module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\EntityReferenceFieldItemList;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\serial_holding\Entity\SerialHolding;

/**
 * Implements hook_FORM_alter().
 */
function newspapers_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_publication_form':
    case 'node_publication_edit_form':
      $form['#attached']['library'][] = 'newspapers_core/pubform';
      array_unshift($form['#validate'], "_newspapers_core_validate_handler");

      $form['actions']['submit_cancel'] = [
        '#type' => 'submit',
        '#weight' => 50,
        '#value' => t('Cancel'),
        '#submit' => ['_newspapers_core_cancel_redirect_callback'],
        '#limit_validation_errors' => [],
        '#attributes' => [
          'class' => ['btn-warning'],
        ],
      ];

      $form['field_serial_relation_pre_ref_up']['#states'] = [
        'visible' => [
          [
            'select[name="field_serial_relationship_op_pre"]' =>
            [
              ['value' => 'continues'],
              'or',
              ['value' => 'union'],
              'or',
              ['value' => 'absorbed'],
              'or',
              ['value' => 'separated'],
            ],
          ],
        ],
      ];
      $form['field_serial_relation_pre_ref_dn']['#states'] = [
        'visible' => [
          'select[name="field_serial_relationship_op_pre"]' => ['value' => 'FORCE_INVISIBLE'],
        ],
      ];

      $form['field_serial_relation_suc_ref_dn']['#states'] = [
        'visible' => [
          [
            'select[name="field_serial_relationship_op_suc"]' =>
            [
              ['value' => 'continued_by'],
              'or',
              ['value' => 'split_into'],
              'or',
              ['value' => 'absorbed_by'],
              'or',
              ['value' => 'merged_with_form'],
            ],
          ],
        ],
      ];
      $form['field_serial_relation_suc_ref_up']['#states'] = [
        'visible' => [
          'select[name="field_serial_relationship_op_suc"]' => ['value' => 'merged_with_form'],
        ],
      ];
  }

}

/**
 * Implements hook_help().
 */
function newspapers_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the newspapers_core module.
    case 'help.page.newspapers_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Newspaper Core Functions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function newspapers_core_node_presave(EntityInterface $node) {
  $blank_the_fields = [];

  switch ($node->getType()) {
    case 'publication':
      $first_issue_daterange = $node
        ->get('field_first_issue_date')
        ->getString();
      $first_issue_date_arr = explode(',', $first_issue_daterange);
      $first_issue_start_date = $first_issue_date_arr[0];
      $first_issue_end_date = count($first_issue_date_arr) < 2 ? NULL : $first_issue_date_arr[1];

      // Remove dates entered prior setting 'First Issue Date is' to 'None'.
      $first_issue_date_type = $node
        ->get('field_first_issue_date_type')
        ->getString();
      switch ($first_issue_date_type) {
        case 'exact':
          $blank_the_fields[] = "field_first_issue_approx_date";
          $first_sort_timestamp = $date_min_timestamp = strtotime($first_issue_start_date);
          break;

        case 'approximate':
          $first_sort_timestamp = (strtotime($first_issue_start_date) + strtotime($first_issue_end_date)) / 2;
          $date_min_timestamp = strtotime($first_issue_start_date);
          break;

        default:
          $blank_the_fields[] = "field_first_issue_date";
          $blank_the_fields[] = "field_first_issue_approx_date";
          $first_sort_timestamp = $date_min_timestamp = NULL;
      }

      // $first_sort_timestamp == false if strtotime invalid format, i.e. null.
      $first_sort_date =
        $first_sort_timestamp ? DrupalDateTime::createFromTimestamp($first_sort_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_first_issue_sort_date')
        ->setValue($first_sort_date);

      $date_min =
        $date_min_timestamp ? DrupalDateTime::createFromTimestamp($date_min_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_first_issue_search_date')
        ->setValue($date_min);

      $last_issue_daterange = $node
        ->get('field_last_issue_date')
        ->getString();
      $last_issue_date_arr = explode(',', $last_issue_daterange);
      $last_issue_start_date = $last_issue_date_arr[0];
      $last_issue_end_date = count($last_issue_date_arr) < 2 ? NULL : $last_issue_date_arr[1];

      $last_issue_date_type = $node
        ->get('field_last_issue_date_type')
        ->getString();

      switch ($last_issue_date_type) {
        case 'exact':
          $blank_the_fields[] = "field_last_issue_approx_date";
          $date_max_timestamp = $last_sort_timestamp = strtotime($last_issue_start_date);
          break;

        case 'approximate':
          $date_max_timestamp = strtotime($last_issue_end_date);
          $last_sort_timestamp = (strtotime($last_issue_start_date) + strtotime($last_issue_end_date)) / 2;
          break;

        case 'ongoing':
          $blank_the_fields[] = "field_last_issue_approx_date";
          $last_issue_end_date = date("Y-m-d");
          $date_max_timestamp = $last_sort_timestamp = strtotime($last_issue_end_date);
          break;

        default:
          $blank_the_fields[] = "field_last_issue_date";
          $blank_the_fields[] = "field_last_issue_approx_date";
          $date_max_timestamp = $last_sort_timestamp = NULL;
      }

      // $last_sort_timestamp == false if strtotime invalid format, i.e. null.
      $last_sort_date =
        $last_sort_timestamp ? DrupalDateTime::createFromTimestamp($last_sort_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_last_issue_sort_date')
        ->setValue($last_sort_date);

      $date_max =
        $date_max_timestamp ? DrupalDateTime::createFromTimestamp($date_max_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_last_issue_search_date')
        ->setValue($date_max);

      // Clear family + supplementary field if Is Family checkbox unchecked.
      if (!_newspapers_core_boolean_is_true($node, 'field_this_is_part_of_a_family')) {
        $blank_the_fields[] = "field_family";
        $blank_the_fields[] = "field_is_supplementary_title";
      }

      // Clear Frequency Notes if Frequency != 'varies'.
      $frequency_none = $node
        ->get('field_frequency')
        ->getString();
      if ($frequency_none != 'varies') {
        $blank_the_fields[] = "field_frequency_notes";
      }

      if (!empty($blank_the_fields)) {
        _newspapers_core_blank_fields($node, $blank_the_fields);
      }

      // Populate Sort Title field, if blank.
      $sort_title = $node
        ->get('field_sort_title')
        ->getString();
      if (empty(trim($sort_title))) {
        $node
          ->get('field_sort_title')
          ->setValue($node->getTitle());
      }

      break;
  }

}

/**
 * Implements hook_preprocess_hook().
 */
function newspapers_core_preprocess_node__publication(&$variables) {
  $node = $variables['elements']['#node'];

  $variables['publication_date_label'] = t("Dates of publication");
  $variables['publication_date_value'] = _newspapers_core_get_daterange($node, TRUE);

  $language_label = $node
    ->field_language
    ->getFieldDefinition()
    ->getLabel();

  $language_value = $node
    ->get('field_language')
    ->get(0)
    ->getNativeName();

  $variables['language_label'] = $language_label;
  $variables['language_value'] = $language_value;

  // Relationships.
  $preceding = $node
    ->get('field_serial_relationship_op_pre');
  $preceding_label = $preceding
    ->getFieldDefinition()
    ->getLabel();
  $preceding_selected = $preceding
    ->getString();
  $preceding_setting = $preceding
    ->getSettings();
  $preceding_setting_value = empty($preceding_selected) ? NULL : $preceding_setting['allowed_values'][$preceding_selected];
  $preceding_upstream = $node->get('field_serial_relation_pre_ref_up');
  $variables['earlier_titles_up'] = _newspapers_core_get_rendered_relationship($preceding_upstream);

  $succeeding = $node->get('field_serial_relationship_op_suc');
  $succeeding_label = $succeeding
    ->getFieldDefinition()
    ->getLabel();
  $succeeding_selected = $succeeding->getString();
  $succeeding_setting = $succeeding->getSettings();
  $succeeding_setting_value = empty($succeeding_selected) ? NULL : $succeeding_setting['allowed_values'][$succeeding_selected];
  $succeeding_upstream = $node->get('field_serial_relation_suc_ref_up');
  $succeeding_downstream = $node->get('field_serial_relation_suc_ref_dn');
  $variables['later_titles_up'] = _newspapers_core_get_rendered_relationship($succeeding_upstream);
  $variables['later_titles_down'] = _newspapers_core_get_rendered_relationship($succeeding_downstream);

  // This is part of a family.
  $variables['family'] = _newspapers_core_get_rendered_title_history($node);
  $family_count = ($variables['family']['#items']) ? count($variables['family']['#items']) : 0;

  // This is a supplementary title.
  $variables['supplemental_title'] = _newspapers_core_get_rendered_title_history($node, TRUE);
  $st_count = ($variables['supplemental_title']['#items']) ? count($variables['supplemental_title']['#items']) : 0;
  switch ($st_count) {
    case 0:
      $variables['supplemental_title_label'] = NULL;
      break;

    case 1:
      $variables['supplemental_title_label'] = t("Supplementary Title");
      break;

    default:
      $variables['supplemental_title_label'] = t("Supplementary Titles");
  }

  // Hide Broad Title History section if history only has 1 publication.
  if ($family_count + $st_count < 2) {
    $variables['family'] = NULL;
  }

  $holdings = _newspapers_core_get_publication_holdings($node->id());
  if ($holdings) {
    foreach ($holdings as $key => $value) {
      switch ($key) {
        case 'microfilm':
        case 'digital':
        case 'physical':
          $variables['holding'] = _newspapers_core_get_holding_vars($key, $value);
          break;

        default:
          throw new Exception("An error occurred. Unknown holding type: $key.");
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function newspapers_core_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($node)) {
    // Append '(supplementary title)' to title of publications
    // whose 'This is supplementary title' field is checked.
    if (is_object($node) &&
      $node->getType() == 'publication' &&
      $node->get('field_is_supplementary_title')->value) {
      $custom_title = [
        '#markup' => '<span>' . $node->getTitle() . ' <small>(supplementary title)</small></span>',
        '#allowed_tags' => Xss::getAdminTagList(),
      ];
      $variables['title'] = $custom_title;
    }
  }
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function newspapers_core_preprocess_views_exposed_form(&$variables) {
  // Convert Views exposed filter > text date input fields to HTML5 date type.
  $variables['#attached']['library'][] = 'newspapers_core/views-exposed-filters';
}

/**
 * Implements hook_theme().
 */
function newspapers_core_theme() {
  return [
    'node__publication' => [
      'template' => 'node--publication',
      'base hook' => 'node',
    ],
  ];
}

/**
 * Nullify all fields of a given array.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the newspaper publication.
 * @param array $fields
 *   The array of field machine names to set to NULL.
 */
function _newspapers_core_blank_fields(Node $node, array $fields) {
  foreach ($fields as $field) {
    if (!$node->hasField($field)) {
      $messenger = \Drupal::messenger();
      $messenger->addError(
        'The <em class="placeholder">@field_name</em> field does not exist - not clearing!',
        [
          '@field_name' => $field,
        ]
      );
    }
    else {
      $node
        ->get($field)
        ->setValue(NULL);
    }
  }
}

/**
 * Determine if a boolean checkbox field is checked.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the newspaper publication.
 * @param string $field
 *   The machine name of the boolean field to check.
 *
 * @return bool
 *   TRUE if the given node field is checked, FALSE otherwise.
 */
function _newspapers_core_boolean_is_true(Node $node, $field) {
  $messenger = \Drupal::messenger();
  // Check if field exists.
  if (!$node->hasField($field)) {
    $messenger->addError(
      'The <em class=\"placeholder\">@field_name</em> field does not exist!',
      [
        '@field_name' => $field,
      ]
    );
    return FALSE;
  }

  // Check if field type is boolean.
  $field_type = $node
    ->get($field)
    ->getFieldDefinition()
    ->getType();
  if ($field_type != 'boolean') {
    $messenger->addError(
      'The <em class=\"placeholder\">@field_name</em> field is not a boolean field!',
      [
        '@field_name' => $field,
      ]
    );
    return FALSE;
  }

  // Check if the boolean field is true, i.e. checked.
  $field_value = $node
    ->get($field)
    ->getString();

  return $field_value ? TRUE : FALSE;
}

/**
 * Cancel changes and return to admin content or node view.
 *
 * @param array $form
 *   The form element.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return string
 *   The redirection url or route name.
 */
function _newspapers_core_cancel_redirect_callback(array &$form, FormStateInterface &$form_state) {
  $current_route = \Drupal::routeMatch()->getRouteName();

  switch ($current_route) {
    case 'entity.node.edit_form':
      // Get node id and return canonical node url.
      $node = $form_state
        ->getFormObject()
        ->getEntity();
      $url = Url::fromRoute(
        'entity.node.canonical',
        ['node' => $node->id()]
      );
      return $form_state->setRedirectUrl($url);

    case 'node.add':
      // Return Admin Content overview route name.
      return $form_state->setRedirect('system.admin_content');
  }

}

/**
 * Determine a publication's date range string.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the publication.
 * @param bool $append_frequency
 *   TRUE if frequency is to be appended to string, FALSE if date range only.
 *
 * @return string
 *   The generated date range string.
 */
function _newspapers_core_get_daterange(Node $node, bool $append_frequency = FALSE) {
  // Set up the publication date display.
  $none_txt = "Unknown";
  $ongoing_txt = "Current";

  $first_date_type = $node
    ->get('field_first_issue_date_type')
    ->getString();
  $first_date_range = $node
    ->get('field_first_issue_date')
    ->getString();
  $first_date_verbatim = $node
    ->get('field_first_issue_approx_date')
    ->getString();

  switch ($first_date_type) {
    case NULL:
      $first_date_txt = $none_txt;
      break;

    case "exact":
      $first_date_txt = date("F j, Y", strtotime($first_date_range));
      break;

    case "approximate":
      $first_date_txt = $first_date_verbatim;
      break;

    default:
      $first_date_txt = "N/A";
  }

  $last_date_type = $node
    ->get('field_last_issue_date_type')
    ->getString();
  $last_date_range = $node
    ->get('field_last_issue_date')
    ->getString();
  $last_date_verbatim = $node
    ->get('field_last_issue_approx_date')
    ->getString();

  switch ($last_date_type) {
    case NULL:
      $last_date_txt = $none_txt;
      break;

    case "exact":
      $last_date_txt = date("F j, Y", strtotime($last_date_range));
      break;

    case "approximate":
      $last_date_txt = $last_date_verbatim;
      break;

    case "ongoing":
      $last_date_txt = $ongoing_txt;
      break;

    default:
      $first_date_txt = "N/A";
  }

  if ($first_date_txt == $none_txt && $last_date_txt == $none_txt) {
    return $none_txt;
  }
  else {
    return $first_date_txt . " - " . $last_date_txt;
  }

}

/**
 * Determine if a node has holding entities referencing it.
 *
 * @param string $key
 *   The name of the holding type.
 * @param \Drupal\serial_holding\Entity\SerialHolding $holding
 *   The serial holding object.
 *
 * @return array
 *   Associative array of label/value pairs for template holdings variables.
 */
function _newspapers_core_get_holding_vars($key, SerialHolding $holding) {
  $holding_variables[$key] = [
    'location' => [
      'label' => 'Location',
      'value' => $holding->getHoldingLocation() . ", filed as " . $holding->getHoldingFiledAs(),
    ],
    'coverage' => [
      'label' => 'Coverage Statement',
      'value' => $holding->getHoldingCoverage(),
    ],
    'notes' => [
      'label' => 'Notes',
      'value' => $holding->getHoldingNotes(),
    ],
  ];

  return $holding_variables;
}

/**
 * Determine if a node has holding entities referencing it.
 *
 * @param int $nid
 *   The id of the node with holding reference.
 *
 * @return array
 *   Associative array of holdings, with holding type as key.
 */
function _newspapers_core_get_publication_holdings(int $nid) {
  $holding_section = NULL;

  $query = Drupal::service('entity.query')
    ->get('serial_holding')
    ->condition('parent_title', $nid);
  $entity_ids = $query->execute();

  $holdings = \Drupal::entityTypeManager()
    ->getStorage('serial_holding')
    ->loadMultiple($entity_ids);

  foreach ($holdings as $holding) {
    $holding_key = strtolower(
      $holding
        ->getHoldingType()
        ->getName()
    );
    $holding_section[$holding_key] = $holding;
  }
  return $holding_section;
}

/**
 * Determine if a multi-valued field list contains entity references.
 *
 * @param Drupal\Core\Field\EntityReferenceFieldItemList $field_list
 *   The entity reference multi-valued field list.
 *
 * @return array
 *   Render array of the field entity references.
 */
function _newspapers_core_get_rendered_relationship(EntityReferenceFieldItemList $field_list) {
  $render_array = [
    '#attributes' => [
      'class' => 'inline-list',
    ],
    '#items' => [],
    '#list_type' => 'ul',
    '#theme' => 'item_list',
  ];

  $count = count($field_list);
  if ($count > 0) {
    foreach ($field_list as $list_item => $publication) {
      $render_array['#items'][] = $publication->view();
    }
    return $render_array;
  }
  else {
    return NULL;
  }

}

/**
 * Determine if a publications family field contains entity reference.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the publication.
 * @param bool $supplemental_titles
 *   TRUE returns supplemental titles, FALSE returns non-supplemental titles.
 *
 * @return array
 *   Render array of the referenced family vocabulary terms, NULL is none.
 */
function _newspapers_core_get_rendered_title_history(Node $node, bool $supplemental_titles = FALSE) {
  $term_id = $node
    ->get('field_family')
    ->getString();
  if (empty($term_id)) {
    return NULL;
  }

  $family_nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'field_family' => $term_id,
    ]);
  if (empty($family_nodes)) {
    return NULL;
  }

  foreach ($family_nodes as $family_node) {
    $field_start_date = $family_node
      ->get('field_first_issue_date')
      ->value;
    $field_supplementary = $family_node
      ->get('field_is_supplementary_title')
      ->value;

    if ($supplemental_titles) {
      if (empty($field_supplementary)) {
        continue;
      }
    }
    elseif (!empty($field_supplementary)) {
      continue;
    }

    $data[] = [
      'daterange' => _newspapers_core_get_daterange($family_node),
      'id' => $family_node->id(),
      'timestamp' => empty($field_start_date) ? date('Y-m-d') : $field_start_date,
      'title' => $family_node->getTitle(),
    ];
  }
  if (empty($data)) {
    return NULL;
  }

  array_multisort(array_column($data, 'timestamp'), SORT_ASC, $data);

  $render_array = [
    '#attributes' => [
      'class' => 'history-list',
    ],
    '#items' => [],
    '#list_type' => 'ul',
    '#theme' => 'item_list',
  ];
  $options = [
    'absolute' => TRUE,
  ];
  foreach ($data as $key => $item) {
    $url = Link::createFromRoute($item['title'], 'entity.node.canonical', ['node' => $item['id']], $options);
    $item_array = $url->toRenderable();
    $item_array['#suffix'] = '<span class="description">' . $item['daterange'] . '</span>';
    $render_array['#items'][] = $item_array;
    if ($item['id'] == $node->id()) {
      $render_array['#items'][$key]['#wrapper_attributes']['class'] = 'current-title';
    }
  }
  return $render_array;

}

/**
 * Custom Publication Form Daterange validation.
 *
 * @param array $form
 *   The publication form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The object containing the current state of the Publication form.
 */
function _newspapers_core_validate_handler(array &$form, FormStateInterface $form_state) {
  $first_issue_element = 'field_first_issue_date';
  $last_issue_element = 'field_last_issue_date';
  $first_issue_date = $form_state->getValue($first_issue_element);
  $last_issue_date = $form_state->getValue($last_issue_element);
  $first_date_label = t("date");
  $last_date_label = t("date");
  $family_element = 'field_family';

  if ($form_state->getValue(['field_first_issue_date_type', '0'])['value'] == 'exact') {
    if (is_null($first_issue_date['0']['value'])) {
      $form_state->setErrorByName(
        $first_issue_element,
        t("The <em>exact</em> date cannot be empty")
      );
    }
  }

  if ($form_state->getValue(['field_first_issue_date_type', '0'])['value'] == 'approximate') {
    $first_date_label = t("approximate start date");

    if (is_null($first_issue_date['0']['value']) ||
      is_null($first_issue_date['0']['end_value'])) {
      $form_state->setErrorByName(
        $first_issue_element,
        t("The <em>approximate</em> date range may not contain an empty date")
      );
    }
    elseif ($first_issue_date['0']['value']->format('U') ==
      $first_issue_date['0']['end_value']->format('U')) {
      $form_state->setErrorByName(
        $first_issue_element,
        t("Approximate <em>start</em> and <em>end</em> dates may not be the same")
      );
    }
  }

  if ($form_state->getValue(['field_last_issue_date_type', '0'])['value'] == 'exact') {
    $last_date_label = t("start date");

    if (is_null($last_issue_date['0']['value'])) {
      $form_state->setErrorByName(
        $last_issue_element,
        t("The <em>exact</em> date cannot be empty")
      );
    }
  }

  if ($form_state->getValue(['field_last_issue_date_type', '0'])['value'] == 'approximate') {
    $last_date_label = t("approximate start date");

    if (is_null($last_issue_date['0']['value']) ||
      is_null($last_issue_date['0']['end_value'])) {
      $form_state->setErrorByName(
        $last_issue_element,
        t("The <em>approximate</em> last issue date range may not contain an empty date")
      );
    }
    elseif ($last_issue_date['0']['value']->format('U') ==
      $last_issue_date['0']['end_value']->format('U')) {
      $form_state->setErrorByName(
        $last_issue_element,
        t("Approximate <em>start</em> and <em>end</em> last issue dates may not be the same")
      );
    }
  }

  if ($first_issue_date['0']['value'] && $last_issue_date['0']['value']) {
    if ($first_issue_date['0']['value']->format('U') >
      $last_issue_date['0']['value']->format('U')) {
      $form_state->setErrorByName(
        $first_issue_element,
        t("First issue @first_date_label should be less than or equal to last issue @last_date_label.", [
          '@first_date_label' => $first_date_label,
          '@last_date_label' => $last_date_label,
        ])
      );
      $form_state->setErrorByName(
        $last_issue_element,
        t("Last issue @last_date_label should be greater than or equal to first issue @first_date_label.", [
          '@last_date_label' => $last_date_label,
          '@first_date_label' => $first_date_label,
        ])
      );
    }
  }

  // Require Family Name entity reference when associated checkbox checked.
  $family_name = $form_state
    ->getValue(['field_family', '0'])['target_id'];
  if ($form_state->getValue(['field_this_is_part_of_a_family', 'value'])) {
    if (empty($family_name)) {
      $form_state->setErrorByName(
        $family_element,
        t("<em>Family Name</em> is required when <em>This is part of a family</em> is checked")
      );
    }
  }

}
