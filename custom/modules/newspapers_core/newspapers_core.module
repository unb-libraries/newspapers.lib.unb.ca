<?php

/**
 * @file
 * Contains newspapers_core.module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Html;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\EntityReferenceFieldItemList;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageManager;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\serial_holding\Entity\SerialHolding;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_cron().
 */
function newspapers_core_cron() {
  if (_newspapers_core_ongoing_publication_dates_needs_update()) {
    update_ongoing_publication_dates();
    \Drupal::state()->set('newspapers_core.last_ongoing_run', time());
  }
  if (_newspapers_core_page_sort_values_needs_update()) {
    update_page_sort_no_first_values();
    \Drupal::state()->set('newspapers_core.last_page_sort_run', time());
  }
}

/**
 * Determine if the ongoing newspaper ranges needs an update.
 *
 * @return bool
 *   TRUE if the ongoing newspaper ranges needs an update. FALSE otherwise.
 */
function _newspapers_core_ongoing_publication_dates_needs_update() {
  $last_ongoing_run = \Drupal::state()->get('newspapers_core.last_ongoing_run', 0);
  $time_now = time();
  $current_hour = date('H', $time_now);
  return ($time_now - $last_ongoing_run) > 10800 &&
    $current_hour >= 1 &&
    $current_hour <= 3;
}

/**
 * Determines if the update_page_sort_no_first_values() cron should run.
 *
 * @return bool
 *   TRUE if the ongoing newspaper ranges needs an update. FALSE otherwise.
 */
function _newspapers_core_page_sort_values_needs_update() {
  $last_ongoing_run = \Drupal::state()->get(
    'newspapers_core.last_page_sort_run',
    0
  );
  $time_now = time();
  $current_hour = date('H', $time_now);
  return ($time_now - $last_ongoing_run) > 10800 &&
    $current_hour >= 2 &&
    $current_hour <= 4;
}

/**
 * Update the dates of ongoing publications to reflect today.
 */
function update_ongoing_publication_dates() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'publication')
    ->condition('field_last_issue_date_type', 'ongoing');
  $results = $query->execute();

  foreach ($results as $result) {
    $node = Node::load($result);
    $node->setNewRevision(FALSE);
    $node->save();
  }
}

/**
 * Updates all digital serial issues that lack a page with sort=1 to have one.
 */
function update_page_sort_no_first_values() {
  $database = \Drupal::database();
  $issues_query_string = <<<EOT
SELECT id
FROM digital_serial_issue
WHERE digital_serial_issue.id NOT IN (
  SELECT pages.parent_issue
  FROM digital_serial_page AS pages
  WHERE pages.page_sort = 1
)
AND digital_serial_issue.id NOT IN (
  SELECT issue.id
  FROM digital_serial_issue AS issue
  WHERE issue.id NOT IN (
    SELECT issuepages.parent_issue
    FROM digital_serial_page as issuepages
  )
)
EOT;
  $issues_query = $database->query($issues_query_string);
  $issues_results = $issues_query->fetchAll();

  foreach ($issues_results as $issue_result) {
    $page_query_string = "SELECT id FROM digital_serial_page WHERE parent_issue={$issue_result->id} ORDER BY page_sort LIMIT 1";
    $page_query = $database->query($page_query_string);
    $page_results = $page_query->fetchAll();
    foreach ($page_results as $page_result) {
      $page = \Drupal::entityTypeManager()
        ->getStorage('digital_serial_page')
        ->load($page_result->id);
      $page->setPageSort('0001');
      $page->save();
    }
  }
}

/**
 * Deletes all digital serial issues that have no pages.
 */
function delete_digital_issues_with_no_pages() {
  $database = \Drupal::database();
  $issues_query_string = <<<EOT
SELECT id
FROM digital_serial_issue
WHERE digital_serial_issue.id NOT IN (
  SELECT pages.parent_issue
  FROM digital_serial_page AS pages
)
EOT;
  $issues_query = $database->query($issues_query_string);
  $issues_results = $issues_query->fetchAll();

  foreach ($issues_results as $issue_result) {
    $page = \Drupal::entityTypeManager()
      ->getStorage('digital_serial_issue')
      ->load($issue_result->id);
    $page->delete();
  }
}

/**
 * Implements hook_FORM_alter().
 */
function newspapers_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'views_exposed_form':
      if ($form['#id'] == 'views-exposed-form-digital-page-lister-page-search') {
        $extended_description = '<span class="mr-1">' .
        t('Search dockworker for keywords within the fulltext content of digitized newspapers.') .
        '</span><a aria-controls="searchTips" aria-expanded="false" class="btn-link text-nowrap"
        data-toggle="collapse" href="#searchTips" role="button"><span aria-hidden="true"
        class="fas fa-question-circle mr-1"></span>tips</a>';

        $form['#info']['filter-search_api_fulltext']['description'] = $extended_description;
      }
      break;

    case 'node_publication_form':
    case 'node_publication_edit_form':
      $form['#attached']['library'][] = 'newspapers_core/pubform';
      $form['#attached']['library'][] = 'newspapers_core/claro-overrides';
      array_unshift($form['#validate'], "_newspapers_core_validate_handler");

      $form['actions']['submit_cancel'] = [
        '#type' => 'submit',
        '#weight' => 50,
        '#value' => t('Cancel'),
        '#submit' => ['_newspapers_core_cancel_redirect_callback'],
        '#limit_validation_errors' => [],
        '#attributes' => [
          'class' => ['btn-warning'],
        ],
      ];

      // Prevent original migrated frequency field editing.
      $form['field_frequency']['#disabled'] = TRUE;

      // Prevent original description field editing.
      $form['field_description']['#disabled'] = TRUE;

      // NBNP-377: Prevent PANB migrated ID field editing if already contains value.
      $form['field_panb_id']['#disabled'] = !empty($form_state
        ->getFormObject()
        ->getEntity()
        ->get('field_panb_id')
        ->value);

      $form['field_serial_relation_pre_ref_up']['#states'] = [
        'visible' => [
          [
            'select[name="field_serial_relationship_op_pre"]' =>
            [
              ['value' => 'continues'],
              'or',
              ['value' => 'union'],
              'or',
              ['value' => 'absorbed'],
              'or',
              ['value' => 'separated'],
            ],
          ],
        ],
      ];
      $form['field_serial_relation_pre_ref_dn']['#states'] = [
        'visible' => [
          'select[name="field_serial_relationship_op_pre"]' => ['value' => 'FORCE_INVISIBLE'],
        ],
      ];

      $form['field_serial_relation_suc_ref_dn']['#states'] = [
        'visible' => [
          [
            'select[name="field_serial_relationship_op_suc"]' =>
            [
              ['value' => 'continued_by'],
              'or',
              ['value' => 'split_into'],
              'or',
              ['value' => 'absorbed_by'],
              'or',
              ['value' => 'merged_with_form'],
            ],
          ],
        ],
      ];
      $form['field_serial_relation_suc_ref_up']['#states'] = [
        'visible' => [
          'select[name="field_serial_relationship_op_suc"]' => ['value' => 'merged_with_form'],
        ],
      ];
      break;

    case 'newspapers_core_homepage':
      $form['#attached']['library'][] = 'newspapers_core/tab-search';
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function newspapers_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form['#id']) {
    case 'views-exposed-form-content-page-1':
      // Remove Language filter options from Manage Content Overview page.
      $form['langcode']['#type'] = 'hidden';
      break;
  }
}

/**
 * Implements hook_help().
 */
function newspapers_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the newspapers_core module.
    case 'help.page.newspapers_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Newspaper Core Functions') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function newspapers_core_node_presave(EntityInterface $node) {
  $blank_the_fields = [];

  switch ($node->getType()) {
    case 'publication':
      $first_issue_daterange = $node
        ->get('field_first_issue_date')
        ->getString();
      $first_issue_date_arr = explode(',', $first_issue_daterange);
      $first_issue_start_date = $first_issue_date_arr[0];
      $first_issue_end_date = count($first_issue_date_arr) < 2 ? NULL : $first_issue_date_arr[1];

      // Remove dates entered prior setting 'First Issue Date is' to 'None'.
      $first_issue_date_type = $node
        ->get('field_first_issue_date_type')
        ->getString();
      switch ($first_issue_date_type) {
        case 'exact':
          $blank_the_fields[] = "field_first_issue_approx_date";
          $first_sort_timestamp = $date_min_timestamp = strtotime($first_issue_start_date);
          break;

        case 'approximate':
          $first_sort_timestamp = (strtotime($first_issue_start_date) + strtotime($first_issue_end_date)) / 2;
          $date_min_timestamp = strtotime($first_issue_start_date);
          break;

        default:
          $blank_the_fields[] = "field_first_issue_date";
          $blank_the_fields[] = "field_first_issue_approx_date";
          $first_sort_timestamp = $date_min_timestamp = NULL;
      }

      // $first_sort_timestamp == false if strtotime invalid format, i.e. null.
      $first_sort_date =
        $first_sort_timestamp ? DrupalDateTime::createFromTimestamp($first_sort_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_first_issue_sort_date')
        ->setValue($first_sort_date);

      $date_min =
        $date_min_timestamp ? DrupalDateTime::createFromTimestamp($date_min_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_first_issue_search_date')
        ->setValue($date_min);

      $last_issue_daterange = $node
        ->get('field_last_issue_date')
        ->getString();
      $last_issue_date_arr = explode(',', $last_issue_daterange);
      $last_issue_start_date = $last_issue_date_arr[0];
      $last_issue_end_date = count($last_issue_date_arr) < 2 ? NULL : $last_issue_date_arr[1];

      $last_issue_date_type = $node
        ->get('field_last_issue_date_type')
        ->getString();

      switch ($last_issue_date_type) {
        case 'exact':
          $blank_the_fields[] = "field_last_issue_approx_date";
          $date_max_timestamp = $last_sort_timestamp = strtotime($last_issue_start_date);
          break;

        case 'approximate':
          $date_max_timestamp = strtotime($last_issue_end_date);
          $last_sort_timestamp = (strtotime($last_issue_start_date) + strtotime($last_issue_end_date)) / 2;
          break;

        case 'ongoing':
          $blank_the_fields[] = "field_last_issue_approx_date";
          $last_issue_end_date = date("Y-m-d");
          $date_max_timestamp = $last_sort_timestamp = strtotime($last_issue_end_date);
          break;

        default:
          $blank_the_fields[] = "field_last_issue_date";
          $blank_the_fields[] = "field_last_issue_approx_date";
          $date_max_timestamp = $last_sort_timestamp = NULL;
      }

      // $last_sort_timestamp == false if strtotime invalid format, i.e. null.
      $last_sort_date =
        $last_sort_timestamp ? DrupalDateTime::createFromTimestamp($last_sort_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_last_issue_sort_date')
        ->setValue($last_sort_date);

      $date_max =
        $date_max_timestamp ? DrupalDateTime::createFromTimestamp($date_max_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_last_issue_search_date')
        ->setValue($date_max);

      // Clear family + supplementary field if Is Family checkbox unchecked.
      if (!_newspapers_core_boolean_is_true($node, 'field_this_is_part_of_a_family')) {
        $blank_the_fields[] = "field_family";
        $blank_the_fields[] = "field_is_supplementary_title";
      }

      // Clear Frequency Notes if Frequency is none.
      $frequency = $node
        ->get('field_marc_frequency')
        ->getString();
      if (empty($frequency)) {
        $blank_the_fields[] = "field_frequency_notes";
      }

      if (!empty($blank_the_fields)) {
        _newspapers_core_blank_fields($node, $blank_the_fields);
      }

      // Trim Title/Sort Title whitespace, autofill Sort Title field if blank.
      $title = trim($node->getTitle());
      $sort_title = trim($node
        ->get('field_sort_title')
        ->getString()
      );
      $node->setTitle($title);
      if (empty($sort_title)) {
        $node
          ->get('field_sort_title')
          ->setValue($title);
      }
      else {
        $node
          ->get('field_sort_title')
          ->setValue($sort_title);
      }
      break;
  }
}

/**
 * Implements hook_entity_presave().
 */
function newspapers_core_entity_presave(EntityInterface $entity) {
  $entity_type = $entity->getEntityTypeId();
  switch ($entity_type) {
    case 'digital_serial_issue':
      // Check Digital Issue Volume/Issue #s, set appropriate alpha sort values.
      $issue_vol_no = $entity->getIssueVol();
      $issue_iss_no = $entity->getIssueIssue();
      if (isset($issue_vol_no)) {
        $issue_vol_sort = str_pad($issue_vol_no, 16, "0", STR_PAD_LEFT);
        $entity->setIssueVolSort($issue_vol_sort);
      }
      if (isset($issue_iss_no)) {
        $issue_iss_sort = str_pad($issue_iss_no, 16, "0", STR_PAD_LEFT);
        $entity->setIssueIssueSort($issue_iss_sort);
      }
      break;
  }

}

/**
 * Implements hook_preprocess_hook().
 */
function newspapers_core_preprocess_node__publication(&$variables) {
  $node = $variables['elements']['#node'];

  $variables['publication_date_label'] = t("Dates of Publication");
  $variables['publication_date_value'] = _newspapers_core_get_daterange($node, TRUE);

  $language_label = $node
    ->field_language
    ->getFieldDefinition()
    ->getLabel();
  $languages = $node->get('field_language');
  $language_values = [];

  foreach ($languages as $language) {
    $lang_code = $language->getString();
    $possible_options = $language->getPossibleOptions();
    $language_values[] = $possible_options[$lang_code];
  }
  if (!empty($language_values)) {
    $variables['language_label'] = count($language_values) < 2 ? $language_label : $language_label . 's';
    $variables['language_values'] = $language_values;
  }

  // Frequency.
  $frequency_label = $node
    ->field_marc_frequency
    ->getFieldDefinition()
    ->getLabel();
  $frequency_value = $node
    ->get('field_marc_frequency')
    ->getString();
  $frequency_notes_value = trim(
    $node
      ->get('field_frequency_notes')
      ->getString()
  );
  $variables['frequency_label'] = $frequency_label;
  if (!empty($frequency_value)) {
    if (!empty($frequency_notes_value)) {
      $frequency_notes_value = " (" . $frequency_notes_value . ")";
    }
    $variables['frequency_value'] = $frequency_value . $frequency_notes_value;
  }
  else {
    // Default to legacy frequency value, if field still exists.
    if ($node->hasField('field_frequency')) {
      $frequency_legacy_value = $node
        ->get('field_frequency')
        ->getString();
    }
    if (!empty($frequency_legacy_value)) {
      $variables['frequency_value'] = $frequency_legacy_value;
    }
  }

  // Publishers.
  $publisher_label = $node
    ->field_publisher
    ->getFieldDefinition()
    ->getLabel();
  $publishers = $node->get('field_publisher');
  $publisher_values = [];
  foreach ($publishers as $publisher) {
    $publisher_values[] = $publisher
      ->entity
      ->getName();
  }
  if (!empty($publisher_values)) {
    $variables['publisher_label'] = count($publisher_values) < 2 ? $publisher_label : $publisher_label . 's';
    $variables['publisher_values'] = $publisher_values;
  }

  // Editors.
  $editor_label = $node
    ->field_editor
    ->getFieldDefinition()
    ->getLabel();
  $editors = $node->get('field_editor');
  $editor_values = [];
  foreach ($editors as $editor) {
    $editor_values[] = $editor
      ->entity
      ->getName();
  }
  if (!empty($editor_values)) {
    $variables['editor_label'] = count($editor_values) < 2 ? $editor_label : $editor_label . 's';
    $variables['editor_values'] = $editor_values;
  }

  // Microfilmed by.
  $microfilmers = $node->get('field_microfilmed_by');
  $microfilmed_by_values = [];
  foreach ($microfilmers as $microfilmer) {
    $microfilmed_by_values[] = $microfilmer
      ->entity
      ->getName();
  }
  if (!empty($microfilmed_by_values)) {
    $variables['microfilmed_by_values'] = $microfilmed_by_values;
  }

  // Relationships.
  $preceding = $node
    ->get('field_serial_relationship_op_pre');
  $preceding_label = $preceding
    ->getFieldDefinition()
    ->getLabel();
  $preceding_selected = $preceding
    ->getString();
  $preceding_setting = $preceding
    ->getSettings();
  $preceding_setting_value = empty($preceding_selected) ? NULL : $preceding_setting['allowed_values'][$preceding_selected];
  $preceding_upstream = $node->get('field_serial_relation_pre_ref_up');
  $variables['earlier_titles_up'] = _newspapers_core_get_rendered_relationship($preceding_upstream);

  $succeeding = $node->get('field_serial_relationship_op_suc');
  $succeeding_label = $succeeding
    ->getFieldDefinition()
    ->getLabel();
  $succeeding_selected = $succeeding->getString();
  $succeeding_setting = $succeeding->getSettings();
  $succeeding_setting_value = empty($succeeding_selected) ? NULL : $succeeding_setting['allowed_values'][$succeeding_selected];
  $succeeding_upstream = $node->get('field_serial_relation_suc_ref_up');
  $succeeding_downstream = $node->get('field_serial_relation_suc_ref_dn');
  $variables['later_titles_up'] = _newspapers_core_get_rendered_relationship($succeeding_upstream);
  $variables['later_titles_down'] = _newspapers_core_get_rendered_relationship($succeeding_downstream);

  // This is part of a family.
  $variables['family'] = _newspapers_core_get_rendered_title_history($node);
  $family_count = (isset($variables['family']['#items'])) ? count($variables['family']['#items']) : 0;

  // This is a supplementary title.
  $variables['supplemental_title'] = _newspapers_core_get_rendered_title_history($node, TRUE);
  $st_count = (isset($variables['supplemental_title']['#items'])) ? count($variables['supplemental_title']['#items']) : 0;
  switch ($st_count) {
    case 0:
      $variables['supplemental_title_label'] = NULL;
      break;

    case 1:
      $variables['supplemental_title_label'] = t("Supplementary Title");
      break;

    default:
      $variables['supplemental_title_label'] = t("Supplementary Titles");
  }

  // Hide Broad Title History section if history only has 1 publication.
  if ($family_count + $st_count < 2) {
    $variables['family'] = NULL;
  }

  $variables['holding'] = [];
  $holdings = _newspapers_core_get_publication_holdings($node->id());
  if ($holdings) {
    foreach ($holdings as $type => $type_holdings) {
      foreach ($type_holdings as $type_holding) {
        // Display digital items under online header.
        if ($type == 'digital') {
          $type_key = 'online';
        }
        else {
          $type_key = $type;
        }

        // Check if parent has been initially set.
        if (empty($variables['holding'][$type_key])) {
          $variables['holding'][$type_key] = [];
        }

        // Get the values. Digital should always appear first.
        if ($type == 'digital') {
          array_push($variables['holding'][$type_key], _newspapers_core_get_holding_details($type, $type_holding));
        }
        else {
          $variables['holding'][$type_key][] = _newspapers_core_get_holding_details($type, $type_holding);
        }
      }
    }
  }
  // Archives website link for extended 'no holdings' text re: titles with PANB title id.
  $panb_title_id = $node->get('field_panb_id');
  $panb_value = $panb_title_id->getValue() ?? NULL;
  if (!empty($panb_value)) {
    // Get PANB Title ID field value (plain text) from FieldItemList::getString().
    $panb_key = $panb_title_id->getString();

    $uri = "https://archives.gnb.ca/ResearchTools/NewspaperDirectory/Directory.aspx?culture=en-CA&Key=" . $panb_key;
    $options = [
      'attributes' => [
        'class' => [
          'link-external',
        ],
      ],
    ];
    $url = Url::fromUri($uri);
    $url->setOptions($options);
    $text = t("holdings listed on the PANB Newspaper Directory");
    $link = Link::fromTextAndUrl($text, $url);

    $variables['archives_link'] = $link->toRenderable();
  }

  // Report additional information or errors button.
  $webform_report = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->load('report_additional_info_errs');
  if ($webform_report != NULL) {
    // Retrieve Webform URL alias for Report webform.
    $report_url = $webform_report->getSetting('page_submit_path');
    if (!empty($report_url)) {
      $variables['display_report_link'] = TRUE;
      $report_url_options = [
        'query' => [
          'newspaper' => $node->getTitle(),
          'subdirectory' => 'node/' . $node->id(),
        ],
      ];
      $variables['report_url'] = Url::fromUri('base:' . $report_url, $report_url_options)->toString();
    }
  }

  $view_mode = $variables['view_mode'];
  if ($view_mode != 'featured') {
    $referer = \Drupal::request()->server->get('HTTP_REFERER');
    if ((strpos($referer, 'search') !== FALSE)) {
      $link_text = t("Back to search results");
      $back_link = Url::fromUri($referer);
      $link_options = [
        'attributes' => [
          'class' => [
            'back-results',
          ],
        ],
      ];
      $back_link->setOptions($link_options);
      $link = Link::fromTextAndUrl($link_text, $back_link);
      $variables['back_link'] = $link->toRenderable();
    }
    else {
      $variables['back_link'] = NULL;
    }
  }

}

/**
 * Implements hook_preprocess_page_title().
 */
function newspapers_core_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($node)) {
    // Append '(supplementary title)' to title of publications
    // whose 'This is supplementary title' field is checked.
    if (is_object($node) &&
    $node->getType() == 'publication' &&
    $node->get('field_is_supplementary_title')->value) {
      $custom_title = _newspapers_core_sanitize_markup('<span>' . $node->getTitle() . ' <small>(supplementary title)</small></span>');
      $variables['title'] = $custom_title;
    }
  }
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function newspapers_core_preprocess_views_exposed_form(&$variables) {
  // Convert Views exposed filter > text date input fields to HTML5 date type.
  $variables['#attached']['library'][] = 'newspapers_core/views-exposed-filters';
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function newspapers_core_preprocess_views_view_field(&$variables) {
  $field = $variables['field'];
  if ($field->field == 'field_last_issue_search_date_sort') {
    if ($variables['field']->getValue($variables['row']) == date('Y-m-d')) {
      $variables['output'] = t('Ongoing');
    }
  }
}

/**
 * Implements hook_theme().
 */
function newspapers_core_theme() {
  return [
    'node__publication' => [
      'template' => 'node--publication',
      'base hook' => 'node',
    ],
    'block__this_day_in_nb_history' => [
      'variables' => [
        'history_issue_id' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_views_pre_render().
 */
function newspapers_core_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'search_reports')) {
    $view->element['#attached']['library'][] = 'newspapers_core/claro-overrides';
  }
}

/**
 * Nullify all fields of a given array.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the newspaper publication.
 * @param array $fields
 *   The array of field machine names to set to NULL.
 */
function _newspapers_core_blank_fields(Node $node, array $fields) {
  foreach ($fields as $field) {
    if (!$node->hasField($field)) {
      $messenger = \Drupal::messenger();
      $messenger->addError("The '$field' field does not exist - not clearing!", FALSE);
    }
    else {
      $node
        ->get($field)
        ->setValue(NULL);
    }
  }
}

/**
 * Determine if a boolean checkbox field is checked.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the newspaper publication.
 * @param string $field
 *   The machine name of the boolean field to check.
 *
 * @return bool
 *   TRUE if the given node field is checked, FALSE otherwise.
 */
function _newspapers_core_boolean_is_true(Node $node, $field) {
  $messenger = \Drupal::messenger();
  // Check if field exists.
  if (!$node->hasField($field)) {
    $messenger->addError("The '$field' field does not exist!", FALSE);
    return FALSE;
  }

  // Check if field type is boolean.
  $field_type = $node
    ->get($field)
    ->getFieldDefinition()
    ->getType();
  if ($field_type != 'boolean') {
    $messenger->addError("The '$field' field is not a boolean field!", FALSE);
    return FALSE;
  }

  // Check if the boolean field is true, i.e. checked.
  $field_value = $node
    ->get($field)
    ->getString();

  return $field_value ? TRUE : FALSE;
}

/**
 * Cancel changes and return to admin content or node view.
 *
 * @param array $form
 *   The form element.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return string
 *   The redirection url or route name.
 */
function _newspapers_core_cancel_redirect_callback(array &$form, FormStateInterface &$form_state) {
  $current_route = \Drupal::routeMatch()->getRouteName();

  switch ($current_route) {
    case 'entity.node.edit_form':
      // Get node id and return canonical node url.
      $node = $form_state
        ->getFormObject()
        ->getEntity();
      $url = Url::fromRoute(
        'entity.node.canonical',
        ['node' => $node->id()]
      );
      return $form_state->setRedirectUrl($url);

    case 'node.add':
      // Return Admin Content overview route name.
      return $form_state->setRedirect('system.admin_content');
  }

}

/**
 * Determine a publication's date range string.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the publication.
 * @param bool $append_frequency
 *   TRUE if frequency is to be appended to string, FALSE if date range only.
 *
 * @return string
 *   The generated date range string.
 */
function _newspapers_core_get_daterange(Node $node, bool $append_frequency = FALSE) {
  // Set up the publication date display.
  $none_txt = "Unknown";
  $ongoing_txt = "Current";

  $first_date_type = $node
    ->get('field_first_issue_date_type')
    ->getString();
  $first_date_range = $node
    ->get('field_first_issue_date')
    ->getString();
  $first_date_verbatim = $node
    ->get('field_first_issue_approx_date')
    ->getString();

  switch ($first_date_type) {
    case NULL:
      $first_date_txt = $none_txt;
      break;

    case "exact":
      $first_date_txt = date("M j, Y", strtotime($first_date_range));
      break;

    case "approximate":
      $first_date_txt = $first_date_verbatim;
      break;

    default:
      $first_date_txt = "N/A";
  }

  $last_date_type = $node
    ->get('field_last_issue_date_type')
    ->getString();
  $last_date_range = $node
    ->get('field_last_issue_date')
    ->getString();
  $last_date_verbatim = $node
    ->get('field_last_issue_approx_date')
    ->getString();

  switch ($last_date_type) {
    case NULL:
      $last_date_txt = $none_txt;
      break;

    case "exact":
      $last_date_txt = date("M j, Y", strtotime($last_date_range));
      break;

    case "approximate":
      $last_date_txt = $last_date_verbatim;
      break;

    case "ongoing":
      $last_date_txt = $ongoing_txt;
      break;

    default:
      $first_date_txt = "N/A";
  }

  if ($first_date_txt == $none_txt && $last_date_txt == $none_txt) {
    return 'Dates ' . $none_txt;
  }
  else {
    return $first_date_txt . Html::decodeEntities("&nbsp;") . '- ' . $last_date_txt;
  }

}

/**
 * Determine if a node has holding entities referencing it.
 *
 * @param string $type
 *   The name of the holding type.
 * @param SerialHolding $holding
 *   The serial holding object.
 *
 * @return array
 *   Associative array of label/value pairs for template holdings variables.
 */
function _newspapers_core_get_holding_details(string $type, SerialHolding $holding) {
  $missing_value = $holding
    ->get('field_missing_holdings')
    ->getValue();
  if ($missing_value) {
    $missing_value = $missing_value[0]['value'];
  }

  switch ($type) {
    case 'microform':
      $filed_as = $holding->getHoldingFiledAs();
      $location_value = empty($filed_as) ? $holding->getHoldingLocation() : $holding->getHoldingLocation() .
        ", filed as " . $filed_as;

      $holding_infos = [
        'institution' => [
          'label' => 'Institution',
          'value' => _newspapers_core_get_rendered_institution($type, $holding),
        ],
        'coverage' => [
          'label' => 'Coverage Statement',
          'value' => _newspapers_core_get_rendered_coverage($type, $holding),
        ],
        'missing' => [
          'label' => 'Missing Coverage',
          'value' => $missing_value,
        ],
        'location' => [
          'label' => 'Location',
          'value' => $location_value,
        ],
        'last_received' => [
          'label' => 'Last Microform Received',
          'value' => $holding->getHoldingLastReceived(),
        ],
        'notes' => [
          'label' => 'Notes',
          'value' => _newspapers_core_sanitize_markup($holding->getHoldingNotes()),
        ],
      ];
      break;

    case 'print':
      $location = trim($holding->getHoldingLocation());
      $call_no = trim($holding->getHoldingCallNumber());
      if (!empty($location) && !empty($call_no)) {
        $location_call_label = 'Location and Call Number';
        $location_call_value = $location . " " . $call_no;
      }
      elseif (!empty($call_no)) {
        $location_call_label = 'Call Number';
        $location_call_value = $call_no;
      }
      else {
        $location_call_label = 'Location';
        $location_call_value = $location;
      }

      $holding_infos = [
        'institution' => [
          'label' => 'Institution',
          'value' => _newspapers_core_get_rendered_institution($type, $holding),
        ],
        'coverage_statement' => [
          'label' => 'Coverage Statement',
          'value' => $holding->getHoldingCoverage(),
        ],
        'missing' => [
          'label' => 'Missing Coverage',
          'value' => $missing_value,
        ],
        'location_call_no' => [
          'label' => $location_call_label,
          'value' => $location_call_value,
        ],
        'retention_period' => [
          'label' => 'Retention Period',
          'value' => $holding->getHoldingRetentionPeriod(),
        ],
        'notes' => [
          'label' => 'Notes',
          'value' => _newspapers_core_sanitize_markup($holding->getHoldingNotes()),
        ],
      ];
      break;

    case 'digital':
      $holding_start_date = empty($holding->getHoldingStartDate())
        ? 'Unknown'
        : $holding->getHoldingStartDate()->format( 'M j, Y');
      $holding_end_date = empty($holding->getHoldingEndDate())
        ? 'Unknown'
        : $holding->getHoldingEndDate()->format('M j, Y');
      $coverage_value = $holding_start_date . ' - ' . $holding_end_date;

      $holding_infos = [
        'institution' => [
          'label' => 'Institution',
          'value' => _newspapers_core_get_rendered_institution($type, $holding),
        ],
        'access' => [
          'label' => 'Access',
          'value' => Link::fromTextAndUrl(
            'Access digitized content',
            Url::fromRoute(
              'view.digital_page_lister.page_issues',
              ['arg_0' => $holding->get('holding_digital_title')->entity->id()],
              []
            )
          ),
        ],
        'coverage' => [
          'label' => 'Coverage',
          'value' => $coverage_value,
        ],
        'missing' => [
          'label' => 'Missing Coverage',
          'value' => $missing_value,
        ],
        'notes' => [
          'label' => 'Notes',
          'value' => _newspapers_core_sanitize_markup($holding->getHoldingNotes()),
        ],
      ];
      break;

    case 'online':
      $uri = $holding->getHoldingUri();
      $access_value = NULL;
      // Uri validation done via Link field.
      if (!empty($uri)) {
        $uri_options = [];
        $access_value = Link::fromTextAndUrl(
          Markup::create('Access online<span class="fas fa-external-link-alt fa-sm ml-1"></span>'),
          Url::fromUri($uri, $uri_options)
        );
      }
      $holding_infos = [
        'institution' => [
          'label' => 'Institution',
          'value' => _newspapers_core_get_rendered_institution($type, $holding),
        ],
        'access' => [
          'label' => 'Access',
          'value' => $access_value,
        ],
        'coverage' => [
          'label' => 'Coverage',
          'value' => $holding->getHoldingCoverage(),
        ],
        'missing' => [
          'label' => 'Missing Coverage',
          'value' => $missing_value,
        ],
        'notes' => [
          'label' => 'Notes',
          'value' => _newspapers_core_sanitize_markup($holding->getHoldingNotes()),
        ],
      ];
      break;

    default:
      $messenger = \Drupal::messenger();
      $messenger->addError("Warning: '$type' is not a valid holding type!", FALSE);
      return FALSE;
  }

  return $holding_infos;
}

/**
 * Determine if a node has holding entities referencing it.
 *
 * @param int $nid
 *   The id of the node with holding reference.
 *
 * @return array
 *   Associative array of holdings, with holding type as key.
 */
function _newspapers_core_get_publication_holdings($nid) {
  $holding_section = [];
  $holding_types = [];
  $query = Drupal::service('entity_type.manager')
    ->getStorage('serial_holding')
    ->getQuery()
    ->condition('parent_title', $nid);
  $entity_ids = $query->execute();

  $holdings = \Drupal::entityTypeManager()
    ->getStorage('serial_holding')
    ->loadMultiple($entity_ids);

  foreach ($holdings as $holding) {
    $holding_type = strtolower(
      $holding
        ->getHoldingType()
        ->getName()
    );

    if ($holding_type === 'digital') {
      $dst_query = \Drupal::entityQuery('digital_serial_title')
        ->condition('status', 1)
        ->condition('parent_title', $nid);
      $dst_result = $dst_query->execute();
      // Note: there should be a maximum of ONE digital serial title.
      $dst_id = reset($dst_result);
      $dsi_query = \Drupal::entityQuery('digital_serial_issue')
        ->condition('status', 1)
        ->condition('parent_title', $dst_id);
      $dsi_ids = $dsi_query->execute();
      // Exclude holding if no digital serial issues found for current digital serial title.
      if (empty($dsi_ids)) {
        continue;
      }
    }

    if (empty($holding_section[$holding_type])) {
      $holding_section[$holding_type] = [];
      $holding_types[] = $holding_type;
    }

    $holding_inst_sort_key = empty($holding->getInstitution())
      ? '[Unknown]'
      : HTML::cleanCssIdentifier(
        $holding
          ->getInstitution()
          ->getName()
      );
    if ($holding_type == 'microform') {
      // Want positive/public microform holdings sorted above negative/preservation ones.
      switch ($holding->getMicroformType()) {
        case 'pos':
          $holding_inst_sort_key .= '-0';
          break;

        case 'neg':
          $holding_inst_sort_key .= '-1';
          break;

        default:
          $holding_inst_sort_key .= '-unknown';
      }
    }
    // Append holding id to permit multiple holdings per institution.
    $holding_inst_sort_key .= '-' .
      $holding
        ->id
        ->getString();
    $holding_section[$holding_type][$holding_inst_sort_key] = $holding;
  }

  // Sort institution key names, alpha ascending, per holding type.
  foreach ($holding_types as $holding_type) {
    ksort($holding_section[$holding_type]);
  }

  return $holding_section;
}

/**
 * Construct the rendered coverage statement with microform type suffix, where applicable.
 *
 * @param string $type
 *   The name of the holding type.
 *
 * @param SerialHolding $holding
 *   The serial holding object.
 *
 * @return string
 *   The markup safe string for the coverage statement template variable.
 */
function _newspapers_core_get_rendered_coverage(string $type, SerialHolding $holding) {
  switch ($type) {
    case 'microform':
      // Get microform values for use in the bracketed suffix display component.
      $microform_type_suffixes = [
        'neg' => [
          'label' => 'preservation',
          'tooltip' => 'Preservation copies are not accessible to public.',
        ],
        'pos' => [
          'label' => 'public',
          'tooltip' => 'Available for general use on&#8209;site.',
        ],
      ];

      $suffix = $holding->getMicroformType() == 'neg'
        ? ' <button class="btn btn-link btn-sm p-0" data-placement="bottom" data-toggle="tooltip"
            title="' . $microform_type_suffixes['neg']['tooltip'] . '" type="button" >
             (<span>' . $microform_type_suffixes['neg']['label'] . '</span>)
           </button>'
        : ' <button class="btn btn-link btn-sm p-0" data-placement="bottom" data-toggle="tooltip"
            title="' . $microform_type_suffixes['pos']['tooltip'] . '" type="button">
             (<span>' . $microform_type_suffixes['pos']['label'] . '</span>)
           </button>';
      break;

    default:
      $suffix = '';
  }

  return Markup::create($holding->getHoldingCoverage() . $suffix);
}

/**
 * Determine the prioritized display name for a holding's Institution.
 *
 * @param string $holding_type
 *   The name of the holding type.
 *
 * @param SerialHolding $holding
 *   The serial holding object.
 *
 * @return string
 *   The markup safe string for the holding institution template variable.
 */
function _newspapers_core_get_rendered_institution(string $holding_type, SerialHolding $holding) {
  // Get Institution short name iff required entity reference is set.
  if (empty($holding->getInstitution()) || empty(
    $holding
      ->getInstitution()
      ->hasField('field_short_name')
    )
  ) {
      $inst_short_name = NULL;
  } else {
    $inst_short_name = $holding
      ->getInstitution()
      ->get('field_short_name')
      ->getString();
  }

  // Get referenced Institution name, prioritizing the short name if it exists.
  $inst_full_name = empty($holding->getInstitution())
    ? 'Unknown'
    : $holding->getInstitution()->getName();
  $inst_name = empty($inst_short_name) ? $inst_full_name : $inst_short_name;

  // Add markup to institution name.
  $inst_string = '<strong>' . $inst_name . '</strong>';
  $inst_clean_name = HTML::cleanCssIdentifier($inst_name);
  switch ($holding_type) {
    case "microform":
      $holding_identifier = $holding->getMicroformType() == 'pos'
        ? $inst_clean_name . '-' . $holding_type . '-pub'
        : $inst_clean_name . '-' . $holding_type . '-pre';
      break;

    case "print":
    case "digital":
    case "online":
      $holding_identifier =  $inst_clean_name . '-' . $holding_type;
      break;

    default:
      $holding_identifier = NULL;
  }

  if (empty($holding->getInstitution())) {
    $inst_description = NULL;
  } else {
    $inst_description = $holding
      ->getInstitution()
      ->get('description')
      ->value;
  }
  if(!empty($inst_description) && !empty($holding_identifier)) {
    $inst_string .= ' (<button class="btn btn-link p-0 text-left"
      data-target="#Dialog-' . $holding_identifier . '" data-toggle="modal" type="button">' .
      '<span class="fas fa-question-circle fa-sm mr-1" aria-hidden="true"></span><small>info</small></button>)
      <div id="Dialog-' . $holding_identifier . '" class="modal fade" aria-hidden="true"
      aria-labelledby="' . 'Label-' . $holding_identifier . '" role="dialog" tabindex="-1">' .
        '<div class="modal-dialog modal-xl">
          <div class="modal-content">
            <div class="modal-header">
              <h2 id="Label-' . $holding_identifier . '" class="modal-title">' . $inst_full_name . '</h2>
                <button class="btn btn-primary" aria-label="Close" data-dismiss="modal" type="button">
                  <span class="fas fa-window-close mr-1" aria-hidden="true"></span>Close
                  <span class="sr-only">Modal</span>
                </button>
              </div>
            <div class="modal-body">' .
              $inst_description .
            '</div>
          </div>
        </div>
      </div>';
  }

  return Markup::create($inst_string);
}

/**
 * Determine if a multi-valued field list contains entity references.
 *
 * @param Drupal\Core\Field\EntityReferenceFieldItemList $field_list
 *   The entity reference multi-valued field list.
 *
 * @return array
 *   Render array of the field entity references.
 */
function _newspapers_core_get_rendered_relationship(EntityReferenceFieldItemList $field_list) {
  $render_array = [
    '#attributes' => [
      'class' => 'inline-list',
    ],
    '#items' => [],
    '#list_type' => 'ul',
    '#theme' => 'item_list',
    '#wrapper_attributes' => [
      'class' => [
        'inline-list',
      ],
    ],
  ];

  $count = count($field_list);
  if ($count > 0) {
    foreach ($field_list as $list_item => $publication) {
      $render_array['#items'][] = $publication->view();
    }
    return $render_array;
  }
  else {
    return NULL;
  }

}

/**
 * Determine if a publications family field contains entity reference.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the publication.
 * @param bool $supplemental_titles
 *   TRUE returns supplemental titles, FALSE returns non-supplemental titles.
 *
 * @return array
 *   Render array of the referenced family vocabulary terms, NULL is none.
 */
function _newspapers_core_get_rendered_title_history(Node $node, bool $supplemental_titles = FALSE) {
  $term_id = $node
    ->get('field_family')
    ->getString();
  if (empty($term_id)) {
    return NULL;
  }

  $family_nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'field_family' => $term_id,
    ]);
  if (empty($family_nodes)) {
    return NULL;
  }

  foreach ($family_nodes as $family_node) {
    $field_start_date = $family_node
      ->get('field_first_issue_date')
      ->value;
    $field_supplementary = $family_node
      ->get('field_is_supplementary_title')
      ->value;

    if ($supplemental_titles) {
      if (empty($field_supplementary)) {
        continue;
      }
    }
    elseif (!empty($field_supplementary)) {
      continue;
    }

    $data[] = [
      'daterange' => _newspapers_core_get_daterange($family_node),
      'id' => $family_node->id(),
      'timestamp' => empty($field_start_date) ? date('Y-m-d') : $field_start_date,
      'title' => $family_node->getTitle(),
    ];
  }
  if (empty($data)) {
    return NULL;
  }

  array_multisort(array_column($data, 'timestamp'), SORT_ASC, $data);

  $render_array = [
    '#attributes' => [
      'class' => 'history-list',
    ],
    '#items' => [],
    '#list_type' => 'ul',
    '#theme' => 'item_list',
  ];
  $options = [
    'absolute' => TRUE,
  ];
  foreach ($data as $key => $item) {
    $url = Link::createFromRoute($item['title'], 'entity.node.canonical', ['node' => $item['id']], $options);
    $item_array = $url->toRenderable();
    $item_array['#suffix'] = '<span class="description">&nbsp;' . $item['daterange'] . '</span>';
    $render_array['#items'][] = $item_array;
    if ($item['id'] == $node->id()) {
      $render_array['#items'][$key]['#wrapper_attributes']['class'] = 'current-title';
    }
  }
  return $render_array;

}

/**
 * Custom markup sanitation.
 *
 * @param string $markup
 *   Text string to be checked for markup.
 *
 * @return array
 *   Text with any disallowed HTML markup stripped, NULL for empty markup.
 */
function _newspapers_core_sanitize_markup($markup) {
  if (empty(trim($markup))) {
    return NULL;
  }
  else {
    return [
      '#markup' => $markup,
      '#allowed_tags' => Xss::getAdminTagList(),
    ];
  }
}

/**
 * Custom Publication Form Daterange validation.
 *
 * @param array $form
 *   The publication form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The object containing the current state of the Publication form.
 */
function _newspapers_core_validate_handler(array &$form, FormStateInterface $form_state) {
  $first_issue_element = 'field_first_issue_date';
  $last_issue_element = 'field_last_issue_date';
  $first_issue_date = $form_state->getValue($first_issue_element);
  $last_issue_date = $form_state->getValue($last_issue_element);
  $first_date_label = t("date");
  $last_date_label = t("date");
  $family_element = 'field_family';
  $sample_img_element = 'field_sample_image';

  // Check that sample image exists (i.e. fids) if Featured checkbox enabled.
  $featured = $form_state->getValue(['field_featured'], '0')['value'];
  $sample_image = $form_state->getValue([$sample_img_element], '0');
  $sample_image_fids = $sample_image[0]['fids'];
  if (!empty($featured) && empty($sample_image_fids)) {
    $form_state->setErrorByName(
      $sample_img_element,
      t("The <em><b>Sample Image</em> field is required when the <em><b>Featured</b></em> option is enabled below.")
    );
  }

  if (null !== $form_state->getValue(['field_first_issue_date_type', '0'])) {
    if ($form_state->getValue(['field_first_issue_date_type', '0'])['value'] == 'exact') {
      if (is_null($first_issue_date['0']['value'])) {
        $form_state->setErrorByName(
          $first_issue_element,
          t("The <em>exact</em> date cannot be empty")
        );
      }
    }
    elseif ($form_state->getValue(['field_first_issue_date_type', '0'])['value'] == 'approximate') {
      $first_date_label = t("approximate start date");

      if (is_null($first_issue_date['0']['value']) ||
        is_null($first_issue_date['0']['end_value'])) {
        $form_state->setErrorByName(
          $first_issue_element,
          t("The <em>approximate</em> date range may not contain an empty date")
        );
      } elseif ($first_issue_date['0']['value']->format('U') ==
        $first_issue_date['0']['end_value']->format('U')) {
        $form_state->setErrorByName(
          $first_issue_element,
          t("Approximate <em>start</em> and <em>end</em> dates may not be the same")
        );
      }
    }
  }

  if (null !== $form_state->getValue(['field_last_issue_date_type', '0'])) {
    if ($form_state->getValue(['field_last_issue_date_type', '0'])['value'] == 'exact') {
      $last_date_label = t("start date");

      if (is_null($last_issue_date['0']['value'])) {
        $form_state->setErrorByName(
          $last_issue_element,
          t("The <em>exact</em> date cannot be empty")
        );
      }
    }
    elseif ($form_state->getValue(['field_last_issue_date_type', '0'])['value'] == 'approximate') {
      $last_date_label = t("approximate start date");

      if (is_null($last_issue_date['0']['value']) ||
        is_null($last_issue_date['0']['end_value'])) {
        $form_state->setErrorByName(
          $last_issue_element,
          t("The <em>approximate</em> last issue date range may not contain an empty date")
        );
      } elseif ($last_issue_date['0']['value']->format('U') ==
        $last_issue_date['0']['end_value']->format('U')) {
        $form_state->setErrorByName(
          $last_issue_element,
          t("Approximate <em>start</em> and <em>end</em> last issue dates may not be the same")
        );
      }
    }
  }

  if ($first_issue_date['0']['value'] && $last_issue_date['0']['value']) {
    if ($first_issue_date['0']['value']->format('U') >
      $last_issue_date['0']['value']->format('U')) {
      $form_state->setErrorByName(
        $first_issue_element,
        t("First issue @first_date_label should be less than or equal to last issue @last_date_label.", [
          '@first_date_label' => $first_date_label,
          '@last_date_label' => $last_date_label,
        ])
      );
      $form_state->setErrorByName(
        $last_issue_element,
        t("Last issue @last_date_label should be greater than or equal to first issue @first_date_label.", [
          '@last_date_label' => $last_date_label,
          '@first_date_label' => $first_date_label,
        ])
      );
    }
  }

  // Require Family Name entity reference when associated checkbox checked.
  $family_name = $form_state
    ->getValue(['field_family', '0'])['target_id'];
  if ($form_state->getValue(['field_this_is_part_of_a_family', 'value'])) {
    if (empty($family_name)) {
      $form_state->setErrorByName(
        $family_element,
        t("<em>Family Name</em> is required when <em>This is part of a family</em> is checked")
      );
    }
  }
}

/**
 * Move multiple all digital_serial_issues from one title to a new title.
 *
 * @param $source_title_id
 *   The entity ID of the digital_serial_title to move the issue from.
 * @param $target_title_id
 *   The entity ID of the digital_serial_title to move the issue to.
 */
function _newspapers_core_move_all_title_issues($source_title_id, $target_title_id) {
  _newspapers_core_query_issues_to_title("SELECT id FROM digital_serial_issue WHERE parent_title=$source_title_id", $target_title_id);
}

/**
 * Move multiple digital_serial_issues to a new title based on a query.
 *
 * @param string $query_string
 *   A MySQL query that returns only a single column of digital_serial_issue
 *   entity IDs.
 * @param $target_title_id
 *   The entity ID of the digital_serial_title to move the issue to.
 */
function _newspapers_core_query_issues_to_title($query_string, $target_title_id) {
  $database = \Drupal::database();
  $query = $database->query($query_string);
  $eids = $query->fetchCol();
  if (!empty($eids)) {
    _newspapers_core_move_issues_to_title($eids, $target_title_id);
  }
}

/**
 * Moves multiple digital_serial_issue entities to a new digital_serial_title.
 *
 * @param array $issue_ids
 *   The entity IDs of the digital_serial_issue to move.
 * @param $target_title_id
 *   The entity ID of the digital_serial_title to move the issue to.
 */
function _newspapers_core_move_issues_to_title(array $issue_ids, $target_title_id) {
  foreach ($issue_ids as $issue_id) {
    _newspapers_core_move_issue_to_title($issue_id, $target_title_id);
  }
}

/**
 * Moves a digital_serial_issue entity to a new digital_serial_title.
 *
 * This is (essentially) a wrapper for $issue->setParentTitle() that
 * additionally considers and updates the issue:
 *   - Data in the pages solr index
 *   - Digital Holdings Record in the parent publication
 *
 * @param $issue_id
 *   The entity ID of the digital_serial_issue to move.
 * @param $target_title_id
 *   The entity ID of the digital_serial_title to move the issue to.
 * @param bool $skip_holdings_update
 *   TRUE if a Digital 'Holdings' update should be skipped after the move.
 */
function _newspapers_core_move_issue_to_title($issue_id, $target_title_id, bool $skip_holdings_update = FALSE) {
  $issue_entity_type = 'digital_serial_issue';
  $issue_storage = \Drupal::entityTypeManager()->getStorage($issue_entity_type);
  $issue_entity = $issue_storage->load($issue_id);
  $source_title_entity = $issue_entity->getParentTitle();

  $title_entity_type = 'digital_serial_title';
  $target_title_storage = \Drupal::entityTypeManager()->getStorage($title_entity_type);
  $target_title_entity = $target_title_storage->load($target_title_id);

  if (!empty($target_title_entity)) {
    $issue_entity->setParentTitle($target_title_entity);
    _newspapers_core_reindex_issues([$issue_entity->id()]);
    if (!$skip_holdings_update) {
      _newspapers_core_update_holding_records(
        [
          $source_title_entity->id(),
          $target_title_entity->id()
        ]
      );
    }
  }
}

/**
 * Updates the 'Digital' holdings record and reindexes a digital_serial_title.
 *
 * @param array $ids
 *   An array of digital_serial_title entity IDs to update.
 */
function _newspapers_core_update_holdings_reindex_solr(array $ids) {
  if (!empty($ids)) {
    _newspapers_core_update_holding_records($ids);
    _newspapers_core_reindex_title_issues($ids);
  }
}

/**
 * Updates the 'Digital' holding record related to a digital_serial_title.
 *
 * @param array $ids
 *   An array of digital_serial_title entity IDs to update.
 */
function _newspapers_core_update_holding_records(array $ids) {
  $title_entity_type = 'digital_serial_title';
  $storage = \Drupal::entityTypeManager()->getStorage($title_entity_type);
  $entity_list = $storage->loadMultiple($ids);

  foreach ($entity_list as $entity) {
    $entity->updateDigitalHoldingRecord();
  }
}

/**
 * Reindex all of a title's digital_serial_issues in solr.
 *
 * @param array $ids
 *   An array of digital_serial_title entity IDs to reindex.
 */
function _newspapers_core_reindex_title_issues(array $ids) {
  if (!empty($ids)) {
    $eids = _newspapers_core_get_titles_issues($ids);
    if (!empty($eids)) {
      _newspapers_core_reindex_issues($eids);
    }
  }
}

/**
 * Retrieve the IDs of all digital_serial_issues from one or more titles.
 *
 * @param array $ids
 *   An array of digital_serial_title entity IDs to retrieve issues for.
 */
function _newspapers_core_get_titles_issues(array $ids) {
  $issues = [];
  $database = \Drupal::database();
  if (!empty($ids)) {
    $title_list = implode(',',$ids);
    $query = $database->query("SELECT id from digital_serial_issue WHERE parent_title IN ($title_list)");
    $eids = $query->fetchCol();
    $issues = array_merge($issues, $eids);
  }
  return $issues;
}

/**
 * Lists all the digital serial issues from one or more titles.
 *
 * @param array $ids
 *   An array of digital_serial_title entity IDs to retrieve issues for.
 */
function _newspapers_core_list_title_issues(array $ids) {
  print implode(
    "\n",
    _newspapers_core_get_titles_issues($ids),
  );
}

/**
 * Displays the number of digital serial issues from one or more titles.
 *
 * @param array $ids
 *   An array of digital_serial_title entity IDs to retrieve issues for.
 */
function _newspapers_core_title_issues_count(array $ids) {
  print count(_newspapers_core_get_titles_issues($ids));
}

/**
 * Lists all the page image paths from digital serial issues.
 *
 * @param array $ids
 *   An array of digital_serial_issue entity IDs to query.
 */
function _newspapers_core_list_issues_files(array $ids) {
  print implode(
    "\n",
    _newspapers_core_get_issues_files($ids),
  );
}

/**
 * Retrieves all the page image paths from digital serial issues.
 *
 * @param array $ids
 *   An array of digital_serial_issue entity IDs to query.
 *
 * @return array
 */
function _newspapers_core_get_issues_files(array $ids) : array {
  $files = [];
  $issue_entity_type = 'digital_serial_issue';
  $storage = \Drupal::entityTypeManager()->getStorage($issue_entity_type);
  $entity_list = $storage->loadMultiple($ids);
  foreach ($entity_list as $entity_id => $entity) {
    $files = array_merge(
      $files,
      $entity->getChildPageImagePaths()
    );
  }
  return $files;
}

/**
 * Reindex digital_serial_issues in solr.
 *
 * @param array $ids
 *   An array of digital_serial_issue entity IDs to reindex.
 */
function _newspapers_core_reindex_issues(array $ids) {
  $issue_entity_type = 'digital_serial_issue';
  $storage = \Drupal::entityTypeManager()->getStorage($issue_entity_type);
  $entity_list = $storage->loadMultiple($ids);

  foreach ($entity_list as $entity_id => $entity) {
    $entity->reIndexInSolr();
  }
}

/**
 * Reindex digital_serial_issues in solr based on IDs returned from a query.
 *
 * @param string $query_string
 *   A MySQL query that returns only a single column of digital_serial_issue
 *   entity IDs.
 */
function _newspapers_core_reindex_issues_query($query_string) {
  $database = \Drupal::database();
  $query = $database->query($query_string);
  $eids = $query->fetchCol();
  if (!empty($eids)) {
    _newspapers_core_reindex_issues($eids);
  }
}

/**
 * Removes all DZI files from disk for an issue entity.
 *
 * @param int $issue_id
 *   The issue's entity ID.
 */
function _newspapers_core_delete_issue_dzi($issue_id) {
  $issue = \Drupal::entityTypeManager()
    ->getStorage('digital_serial_issue')
    ->load($issue_id);
  if (!empty($issue)) {
    $page_ids = $issue->getChildPageIds();
    if (!empty($page_ids)) {
      foreach ($page_ids as $page_id) {
        _newspapers_core_delete_image_dzi($page_id);
      }
    }
  }
}

/**
 * Removes the DZI files from disk for a page entity.
 *
 * The recursive remove is potentially dangerous but is mitigated by string
 * checks.
 *
 * @param int $page_id
 *   The page's entity ID.
 */
function _newspapers_core_delete_image_dzi($page_id) {
  $page = \Drupal::entityTypeManager()
    ->getStorage('digital_serial_page')
    ->load($page_id);
  if (!empty($page)) {
    $image = $page->getPageImage();
    $uri = $image->getFileUri();
    $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager')->getViaUri($uri);
    $file_path = $stream_wrapper_manager->realpath();
    if (file_exists($file_path) && str_contains($file_path, 'files/serials/pages')) {
      $path_parts = pathinfo($file_path,PATHINFO_ALL);
      if (!empty($path_parts['extension'])) {
        $dzi_path = str_replace(".{$path_parts['extension']}", '.dzi', $file_path);
        $dzi_dir = str_replace(".{$path_parts['extension']}", '_files', $file_path);
        if (file_exists($dzi_path) && str_contains($dzi_path, '.dzi')) {
          unlink($dzi_path);
        }
        if (is_dir($dzi_dir) && str_contains($dzi_dir, '_files')) {
          _newspapers_core_rmdir_recursive($dzi_dir);
        }
      }
    }
  }
}

/**
 * Removes a directory recursively.
 *
 * The recursive remove is potentially dangerous but is mitigated by string
 * checks.
 *
 * @param string $dir_path
 *   The path to recursively delete.
 *
 * @SEE mmakshita2398 at gmail dot com
 * @SEE https://www.php.net/manual/en/function.rmdir.php#123670
 */
function _newspapers_core_rmdir_recursive($dir_path) {
  if (!empty($dir_path) && $dir_path != '/' && str_contains($dir_path, '/files/')) {
    if(!empty($dir_path) && is_dir($dir_path) ){
      $dir_obj= new \RecursiveDirectoryIterator($dir_path, \RecursiveDirectoryIterator::SKIP_DOTS);
      $files = new \RecursiveIteratorIterator($dir_obj, \RecursiveIteratorIterator::CHILD_FIRST);
      foreach ($files as $path)
        $path->isDir() && !$path->isLink() ? rmdir($path->getPathname()) : unlink($path->getPathname());
      rmdir($dir_path);
      return TRUE;
    }
    return FALSE;
  }
  return FALSE;
}
