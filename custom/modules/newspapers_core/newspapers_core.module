<?php

/**
 * @file
 * Contains newspapers_core.module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function newspapers_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the newspapers_core module.
    case 'help.page.newspapers_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Newspaper Core Functions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function newspapers_core_theme() {
  return [
    'newspapers_core' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_FORM_alter().
 */
function newspapers_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_publication_form':
    case 'node_publication_edit_form':
      $form['#attached']['library'][] = 'newspapers_core/pubform';
      array_unshift($form['#validate'], "_newspapers_core_validate_handler");
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function newspapers_core_node_presave(EntityInterface $node) {
  $blank_the_fields = [];

  switch ($node->getType()) {
    case 'publication':
      $first_issue_daterange = $node
        ->get('field_first_issue_date')
        ->getString();
      $first_issue_date_arr = explode(',', $first_issue_daterange);
      $first_issue_start_date = $first_issue_date_arr[0];
      $first_issue_end_date = count($first_issue_date_arr) < 2 ? NULL : $first_issue_date_arr[1];

      // Remove verbatim dates entered prior clearing approx date checkboxes.
      if (!_newspapers_core_boolean_is_true($node, 'field_first_issue_date_is_approx')) {
        $blank_the_fields[] = "field_first_issue_approx_date";
        $first_sort_timestamp = strtotime($first_issue_start_date);
      }
      else {
        $first_sort_timestamp = (strtotime($first_issue_start_date) + strtotime($first_issue_end_date)) / 2;
      }
      // $first_sort_timestamp == false if strtotime invalid format, i.e. null.
      $first_sort_date =
        $first_sort_timestamp ? DrupalDateTime::createFromTimestamp($first_sort_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_first_issue_sort_date')
        ->setValue($first_sort_date);

      $last_issue_daterange = $node
        ->get('field_last_issue_date')
        ->getString();
      $last_issue_date_arr = explode(',', $last_issue_daterange);
      $last_issue_start_date = $last_issue_date_arr[0];
      $last_issue_end_date = count($last_issue_date_arr) < 2 ? NULL : $last_issue_date_arr[1];

      if (!_newspapers_core_boolean_is_true($node, 'field_last_issue_date_is_approx')) {
        $blank_the_fields[] = "field_last_issue_approx_date";
        $last_sort_timestamp = strtotime($last_issue_start_date);
      }
      else {
        $last_sort_timestamp = (strtotime($last_issue_start_date) + strtotime($last_issue_end_date)) / 2;
      }

      // $last_sort_timestamp == false if strtotime invalid format, i.e. null.
      $last_sort_date =
        $last_sort_timestamp ? DrupalDateTime::createFromTimestamp($last_sort_timestamp)
          ->format('Y-m-d') : NULL;
      $node
        ->get('field_last_issue_sort_date')
        ->setValue($last_sort_date);

      // Clear Frequency Notes if Frequency 'varies' list item isn't selected.
      $frequency = $node
        ->get('field_frequency')
        ->getString();
      if ($frequency != "varies") {
        $blank_the_fields[] = "field_frequency_notes";

      }

      break;
  }

  if (!empty($blank_the_fields)) {
    _newspapers_core_blank_fields($node, $blank_the_fields);
  }

  // Populate Sort Title field, if blank.
  $sort_title = $node
    ->get('field_sort_title')
    ->getString();
  if (empty(trim($sort_title))) {
    $node
      ->get('field_sort_title')
      ->setValue($node->getTitle());
  }

}

/**
 * Determine if a boolean checkbox field is checked.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the newspaper publication.
 * @param string $field
 *   The machine name of the boolean field to check.
 *
 * @return bool
 *   TRUE if the given node field is checked, FALSE otherwise.
 */
function _newspapers_core_boolean_is_true(Node $node, $field) {
  // Check if field exists.
  if (!$node->hasField($field)) {
    $msg = "The <em class=\"placeholder\">$field</em> field does not exist!";
    drupal_set_message(t($msg), 'error');
    return FALSE;
  }

  // Check if field type is boolean.
  $field_type = $node
    ->get($field)
    ->getFieldDefinition()
    ->getType();
  if ($field_type != 'boolean') {
    $msg = "The <em class=\"placeholder\">$field</em> field is not a boolean field!";
    drupal_set_message(t($msg), 'error');
    return FALSE;
  }

  // Check if the boolean field is true, i.e. checked.
  $field_value = $node
    ->get($field)
    ->getString();

  return $field_value ? TRUE : FALSE;
}

/**
 * Nullify all fields of a given array.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node of the newspaper publication.
 * @param array $fields
 *   The array of field machine names to set to NULL.
 */
function _newspapers_core_blank_fields(Node $node, array $fields) {
  foreach ($fields as $field) {
    if (!$node->hasField($field)) {
      $msg = "The <em class=\"placeholder\">$field</em> field does not exist - not clearing!";
      drupal_set_message(t($msg), 'error');
    }
    else {
      // $field_label = $node->$field->getFieldDefinition()->getLabel();
      $node
        ->get($field)
        ->setValue(NULL);
    }
  }
}

/**
 * Custom Publication Form Daterange validation.
 *
 * @param array $form
 *   The publication form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The object containing the current state of the Publication form.
 */
function _newspapers_core_validate_handler(array &$form, FormStateInterface $form_state) {
  $empty_message = t("Approximate <em>start</em> and <em>end</em> dates cannot be empty");
  $range_message = t("Approximate <em>start</em> and <em>end</em> dates should not be the same");

  $first_issue_element = 'field_first_issue_date';
  $last_issue_element = 'field_last_issue_date';
  $first_issue_date = $form_state->getValue($first_issue_element);
  $last_issue_date = $form_state->getValue($last_issue_element);
  $first_date_label = t("date");
  $last_date_label = t("date");

  if ($form_state->getValue(['field_first_issue_date_is_approx', 'value'])) {
    $first_date_label = t("approximate start date");

    if (is_null($first_issue_date['0']['value']) ||
      is_null($first_issue_date['0']['end_value'])) {
      $form_state->setErrorByName(
        $first_issue_element,
        $empty_message);
    }

    if ($first_issue_date['0']['value']->format('U') ==
      $first_issue_date['0']['end_value']->format('U')) {
      $form_state->setErrorByName(
        $first_issue_element,
        $range_message);
    }
  }

  if ($form_state->getValue(['field_last_issue_date_is_approx', 'value'])) {
    $last_date_label = t("approximate start date");

    if (is_null($last_issue_date['0']['value']) ||
      is_null($last_issue_date['0']['end_value'])) {
      $form_state->setErrorByName(
        $last_issue_element,
        $empty_message);
    }

    if ($last_issue_date['0']['value']->format('U') ==
      $last_issue_date['0']['end_value']->format('U')) {
      $form_state->setErrorByName(
        $last_issue_element,
        $range_message);
    }
  }

  if ($first_issue_date['0']['value'] && $last_issue_date['0']['value']) {
    if ($first_issue_date['0']['value']->format('U') >
      $last_issue_date['0']['value']->format('U')) {
      $form_state->setErrorByName(
        $first_issue_element,
        t("First issue $first_date_label should be less than or equal to last issue $last_date_label.")
      );
      $form_state->setErrorByName(
        $last_issue_element,
        t("Last issue $last_date_label should be greater than or equal to first issue $first_date_label.")
      );
    }
  }

}
